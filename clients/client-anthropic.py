import asyncio
import os
from contextlib import AsyncExitStack

from dotenv import load_dotenv
from anthropic import AsyncAnthropic
from mcp import ClientSession
from mcp.client.stdio import stdio_client, StdioServerParameters

class MCPChatClient:
    """Client interactif se connectant √† un serveur MCP et dialoguant avec Claude."""
    def __init__(self):
        # Charger la cl√© API Anthropic depuis le .env dans les variables d'env
        load_dotenv()
        # Initialiser le client Claude (utilisera ANTHROPIC_API_KEY depuis l'environnement)
        self.anthropic = AsyncAnthropic()
        self.session = None
        self.exit_stack = AsyncExitStack()
        self.messages = []  # Historique des messages de la conversation
        self.tools = []     # Description des outils MCP disponibles

    async def connect_to_server(self, server_script: str, *server_args):
        """Lance le serveur MCP en sous-processus et √©tablit la connexion."""
        # Pr√©parer les param√®tres pour une connexion via STDIO au script serveur
        params = StdioServerParameters(
            command="python",
            args=[server_script, *server_args]
        )
        # D√©marrer le serveur MCP et obtenir les flux I/O
        read_stream, write_stream = await self.exit_stack.enter_async_context(stdio_client(params))
        # Cr√©er la session MCP avec les flux du serveur
        self.session = await self.exit_stack.enter_async_context(ClientSession(read_stream, write_stream))
        # Initialiser la session (handshake MCP)
        await self.session.initialize()
        # R√©cup√©rer la liste des outils disponibles sur le serveur
        resp = await self.session.list_tools()
        # Stocker la liste des outils sous forme de dict (nom, description, sch√©ma)
        self.tools = [
            {"name": tool.name, "description": tool.description, "input_schema": tool.inputSchema} 
            for tool in resp.tools
        ]
        # Message de confirmation
        tool_names = [tool["name"] for tool in self.tools]
        print(f"‚úÖ Connect√© au serveur MCP. Outils disponibles : {tool_names}")

    async def process_query(self, query: str) -> str:
        """Envoie une requ√™te utilisateur √† Claude et retourne la r√©ponse finale."""
        # Ajouter le message utilisateur √† l'historique
        self.messages.append({"role": "user", "content": query})
        # Appel initial √† l'API Claude avec les messages et la liste d'outils disponibles
        response = await self.anthropic.messages.create(
            model="claude-3-5-latest",   # on utilise la derni√®re version de Claude 3.5 (par exemple)
            messages=self.messages,
            tools=self.tools,
            max_tokens=1000
        )
        # Accumulateur pour le texte de r√©ponse √† afficher
        final_answer_parts = []
        # Boucler tant que Claude demande des outils et qu'on lui fournit les r√©sultats
        while True:
            # Parcourir les blocs de la r√©ponse (texte et/ou demande d'outil)
            tool_request = None
            for content in response.content:
                if content.type == 'text':
                    # Accumuler les segments de texte g√©n√©r√©s
                    if content.text:
                        final_answer_parts.append(content.text)
                elif content.type == 'tool_use':
                    # Claude souhaite utiliser un outil
                    tool_request = content
                    break  # on sort de la boucle pour traiter l'outil
            if tool_request is None:
                # Aucune demande d'outil dans la r√©ponse, on a donc une r√©ponse finale
                break
            # Si on a d√©tect√© un outil √† appeler
            tool_name = tool_request.name
            tool_args = tool_request.input
            print(f"[Appel de l'outil {tool_name} avec les param√®tres {tool_args}]")
            # Ex√©cuter l'appel de l'outil via la session MCP
            result = await self.session.call_tool(tool_name, tool_args)
            # Ajouter √©ventuellement la pens√©e/texte associ√© (si fourni par Claude avant l'appel)
            if hasattr(tool_request, 'text') and tool_request.text:
                # Consid√©rer le texte pr√©c√©dent l'appel outil comme r√©ponse partielle
                self.messages.append({"role": "assistant", "content": tool_request.text})
            # Ajouter le r√©sultat de l'outil comme message utilisateur (entr√©e pour Claude)
            self.messages.append({"role": "user", "content": result.content})
            # Reprendre la conversation en interrogeant √† nouveau Claude avec le r√©sultat
            response = await self.anthropic.messages.create(
                model="claude-3-5-latest",
                messages=self.messages,
                max_tokens=1000
            )
            # puis boucle √† nouveau pour v√©rifier si Claude veut un autre outil
            continue
        # Joindre tous les segments de texte collect√©s comme r√©ponse finale
        final_answer = "".join(final_answer_parts).strip()
        # Ajouter la r√©ponse finale de Claude √† l'historique des messages (r√¥le assistant)
        self.messages.append({"role": "assistant", "content": final_answer})
        return final_answer

    async def chat_loop(self):
        """Boucle interactive de chat avec l'utilisateur."""
        print("\nüóò D√©marrage du chat interactif MCP (tapez 'quit' pour quitter)")
        while True:
            try:
                query = input("\n‚ûú Votre question : ").strip()
            except (EOFError, KeyboardInterrupt):
                # En cas de Ctrl+C ou fermeture de l'entr√©e, on quitte proprement
                print("\n\n[Arr√™t de la session]")
                break
            if query.lower() in {"quit", "exit", "q"}:
                print("[Fin de la conversation]")
                break
            if not query:
                continue  # ignorer les entr√©es vides
            # Traiter la requ√™te utilisateur via Claude et outils MCP
            try:
                answer = await self.process_query(query)
                # Afficher la r√©ponse de Claude
                print(f"\nClaude ü§ñ: {answer}")
            except Exception as e:
                print(f"\n[Erreur lors du traitement de la requ√™te : {e}]")

    async def cleanup(self):
        """Nettoie et ferme toutes les ressources (session MCP, processus, etc.)."""
        # Fermer la session et le processus serveur MCP via l'ExitStack
        await self.exit_stack.aclose()


async def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    server_script = os.path.join(script_dir, "src", "mcp_gtfs", "server.py")
    print(f"Utilisation du serveur MCP depuis : {server_script}")

    client = MCPChatClient()
    try:
        # Connexion au serveur MCP
        await client.connect_to_server(server_script)
        # Lancer la boucle interactive
        await client.chat_loop()
    finally:
        # Nettoyage des ressources
        await client.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
